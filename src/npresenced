#!/usr/bin/perl
#
##############################################################################
# npresenced
# Copyright (C) 2021 Mirko Lindner, demon@pro-linux.de
#
# checks for one or multiple bluetooth devices for their
# presence state and reports it to a FHEM server
#
# Based on leprecenced
# Copyright (C) 2015-2018 P. Reinhardt, pr-fhem (at) reinhardtweb (dot) de
#
# This script free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# The GNU General Public License can be found at
# http://www.gnu.org/copyleft/gpl.html.
# A copy is found in the textfile GPL.txt and important notices to the
# license from the author is found in LICENSE.txt distributed with these
# scripts.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
##############################################################################

use strict;
use warnings;

use threads;
use threads::shared;
use Fcntl 'LOCK_EX', 'LOCK_NB';

use IO::Select;
use IO::Socket::INET;

use Getopt::Long;
use Sys::Syslog qw(:standard :macros);
use Time::HiRes qw(usleep);
use Net::Server::Daemonize qw(daemonize);

# use Data::Dumper;

use constant RETRY_SLEEP                          => 1;
use constant INET_RECV_BUFFER                     => 1024;
use constant MAINLOOP_SLEEP_US                    => 250 * 1000;

use constant CLEANUP_INTERVAL                     => 15 * 60;
use constant CLEANUP_MAX_AGE                      => 30 * 60;
use constant STATS_INTERVAL_INFO                  =>  5 * 60;
use constant STATS_INTERVAL_DEBUG                 =>  1 * 60;
use constant DUMP_INTERVAL                        => 10;
use constant STATIC_DOWN_DELAY                    => 2;

use constant ME                                   => 'npresenced';
use constant VERSION                              => '0.01';
use constant PIDFILE                              => "/var/run/" . ME . ".pid";

use constant THREAD_COMMAND_RUN                   => 0;
use constant THREAD_COMMAND_STOP                  => 1;
use constant THREAD_COMMAND_RESTART               => 2;

my %devices :shared;
my %static :shared;
my %force :shared;
my @clients = ();

my ($next_dump_time, $next_stats_time, $next_cleanup_time);
my ($log_level, $log_target);
my $debug;

my %thread_commands :shared = (
  'bluetooth_info_thread' => THREAD_COMMAND_RUN,
);

sub syslogw {
  my ($priority, @args) = @_;
  return if (scalar(@args) < 1);
  my $logmessage;
  if (scalar(@args)==1) {
    my ($message) = @args;
    $logmessage = sprintf("[tid:%i] %s: $message", threads->self()->tid(), (caller(1))[3] // 'main');
  } else {
    my ($format, @args) = @args;
    $logmessage = sprintf("[tid:%i] %s: $format", threads->self()->tid(), (caller(1))[3] // 'main', @args);
  }
  if ($log_level >= $priority) {
    if ($log_target eq 'syslog') {
      syslog($priority, $logmessage) if ($log_level >= $priority);
    } elsif ($log_target eq 'stdout' && !$debug) {
      printf("%s\n", $logmessage);
    }
  }
  printf("%s\n", $logmessage) if ($debug);
  return();
}

sub error_exit {
  my ($exit_code, @args) = @_;
  syslogw(LOG_ERR, @args);
  foreach my $thread (threads->list()) {
    $thread->exit(0);
  }
  exit ($exit_code);
}

sub usage_version {
  printf("%s %s\n", ME, VERSION);
  closelog();
  exit(1);
}

sub usage_exit {
  print("Usage:\n");
  printf("\t %s [options]\n", ME);
  print("Options:\n");
  print("  -a, --listenaddress   Address on which the server listens for connections\n");
  print("  -b, --bluetoothdevice HCI device used for scanning\n");
  print("  -d, --daemon          Run as a daemon in background\n");
  print("      --debug           Enable debug mode\n");
  print("  -h  --help            Display this help\n");
  print("  -l, --loglevel        Log level (Default: LOG_INFO)\n");
  print("                        LOG_CRIT, LOG_ERR, LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG\n");
  print("  -p, --listenport      Port on which the server listens for connections\n");
  print("  -t, --logtarget       Log target: syslog, stdout (Default: syslog)\n");
  print("  -V, --version         Display version\n");
  print("");
  print("Examples:\n");
  printf("  %s -l LOG_INFO -t stdout\n", ME);
  printf("  %s -b hci0 -a 127.0.0.1 -p 5333 --daemon\n", ME);
  closelog();
  exit(1);
}

sub parse_log_level {
  my ($log_level_str) = @_;
  $log_level_str = uc($log_level_str);

  return  ( $log_level_str eq 'LOG_EMERG'   ? LOG_EMERG
          : $log_level_str eq 'LOG_ALERT'   ? LOG_ALERT
          : $log_level_str eq 'LOG_CRIT'    ? LOG_CRIT
          : $log_level_str eq 'LOG_ERR'     ? LOG_ERR
          : $log_level_str eq 'LOG_WARNING' ? LOG_WARNING
          : $log_level_str eq 'LOG_NOTICE'  ? LOG_NOTICE
          : $log_level_str eq 'LOG_INFO'    ? LOG_INFO
          : $log_level_str eq 'LOG_DEBUG'   ? LOG_DEBUG
          : usage_exit()
          );
}

sub humanize_thread_command {
  my ($command) = @_;
  return  ( $command eq THREAD_COMMAND_RUN     ? 'THREAD_COMMAND_RUN'
          : $command eq THREAD_COMMAND_STOP    ? 'THREAD_COMMAND_STOP'
          : $command eq THREAD_COMMAND_RESTART ? 'THREAD_COMMAND_RESTART'
          : '?'
          );
}

sub parse_options {
  my $device                      = "hci0";
  my $daemonize                   = 0;
  my $listen_address              = "0.0.0.0";
  my $listen_port                 = "5333";
  my $log_target                  = "syslog";
  my $log_level                   = "LOG_INFO";
  my $debug                       = 0;
  my $help                        = 0;
  my $version                     = 0;

  GetOptions(
    'bluetoothdevice|device|b=s'  => \$device,
    'daemon|daemonize|d!'         => \$daemonize,
    'listenaddress|address|a=s'   => \$listen_address,
    'listenport|port|p=i'         => \$listen_port,
    'loglevel|l=s'                => \$log_level,
    'logtarget|t=s'               => \$log_target,
    'debug!'                      => \$debug,
    'help|h!'                     => \$help,
    'version|V!'                  => \$version,
  ) or usage_exit();

  usage_exit() if ($help);
  usage_version() if ($version);

  $listen_address =~ m/^\d+\.\d+\.\d+\.\d+$/ or usage_exit();
  $log_target =~ m/^(syslog|stdout)$/ or usage_exit();
  $log_level = parse_log_level($log_level);
  $daemonize = 0 if ($debug);

  return ($device, $daemonize, $listen_address, $listen_port, $log_level, $log_target, $debug);
}

sub sanity_check {

  error_exit(3, "ERROR: " . ME . " is already running. Exiting.") if (!flock DATA, LOCK_EX | LOCK_NB);

  # check if necessary external binaries exist
  my $ok = 1;
  foreach my $binary (qw/hcitool/) {
    my $binpath = `which $binary 2>/dev/null`;
    chomp($binpath);
    if ($? == 0) {
      syslogw(LOG_INFO, "%s found at '%s'.", $binary, $binpath);
    } else {
      syslogw(LOG_ERR, "ERROR: %s not found!", $binary);
      $ok = 0;
    }
  }

  if (!$ok && !$debug && $log_target eq 'syslog') {
    print "ERROR: Exiting due to missing binaries. For more details use option --debug\n";
    print "";
  }

  error_exit(4, "ERROR: Exiting due to missing binaries.") if (!$ok);

  return();
}

sub update_device {
  my ($mac, $name, $address_type, $force, $time) = @_;
  $mac = lc($mac);
  $address_type = "" if !$address_type;
  $time = time() if !$time || $time == 0;
  {
    lock(%devices);
    unless (exists $devices{$mac}) {
      my %device :shared;
      $devices{$mac} = \%device;
    }

    $name = '(unknown)' if ($name eq '');
    if (!defined($devices{$mac}{'name'}) || $name ne '(unknown)') {
      $devices{$mac}{'name'} = $name
    }

    $devices{$mac}{'prevtimestamp'} = $devices{$mac}{'timestamp'};
    $devices{$mac}{'address_type'} = lc($address_type);
    $devices{$mac}{'timestamp'} = $time;

    lock(%force);
    $force{$mac} = 1 if $force;
  }
  return();
}

sub set_thread_command {
  my ($thread, $command) = @_;
  syslogw(LOG_DEBUG, "Setting thread command of thread '%s' to '%s'.", $thread, humanize_thread_command($command));
  $thread_commands{$thread} = $command;
  return();
}

sub upvote_timer {
  my ($staticdev, $inmac) = @_;
  my $update = time() + $static{$inmac};
  my $next = time()+5;

  foreach my $mac (keys %static) {
    next if $mac eq $inmac;
    next if !$$staticdev{$mac}[1];

    if (($next > $$staticdev{$mac}[1]-5) && ($next < $$staticdev{$mac}[1]+5)) {
      $next = $$staticdev{$mac}[1]+5;
      next;
    }
  }

  return ($next > $update ? $update : $next);
}

sub downvote_timer {
  my ($staticdev, $inmac, $initoffset) = @_;
  my $update = time() + $static{$inmac};
  my $ret = 0;

  foreach my $mac (keys %static) {
    next if $mac eq $inmac;
    next if !$$staticdev{$mac}[1];
    $ret = 1 if $$staticdev{$mac}[1] < $update+$initoffset && $$staticdev{$mac}[1] >= $update;
    last if $ret;
  }

  return ($ret ? $initoffset : 0);
}

sub calc_next_update {
  my ($staticdev, $mac) = @_;
  my $update = 0;
  my $offset;


  if ($$staticdev{$mac}[0] >= STATIC_DOWN_DELAY) {
    $offset = upvote_timer($staticdev, $mac);
    return $offset if $offset;
  }

  # Find a queue timeslot
  for (my $i=0; $i<=$static{$mac}*0.3; $i+=5) {
    $offset = downvote_timer($staticdev, $mac, $i);

    if ($offset) {
      $update = time() + $static{$mac} + $offset;
      last;
    }
  }

  return (!$update ? time() + $static{$mac} : $update);
}

sub bluetooth_info_thread {
  my ($device) = @_;
  my %staticdev;
  my ($devname);

  for(;;) {
    # syslogw(LOG_DEBUG, "Thread command: '%s'.", $thread_commands{bluetooth_info_thread});
    if ($thread_commands{bluetooth_info_thread} != THREAD_COMMAND_STOP) {

      foreach my $mac (keys %static) {
        if (!defined $staticdev{$mac}[0]) {
          # Init call
          $staticdev{$mac}[0] = STATIC_DOWN_DELAY + 1; # number of retries
          $staticdev{$mac}[1] = 0;  # next check
          $staticdev{$mac}[2] = 0;  # prev. check
          $staticdev{$mac}[3] = ""; # device name
          $staticdev{$mac}[4] = 0;  # force update
        }

         if ($staticdev{$mac}[1] < time()) {
          # Check for an update
          $staticdev{$mac}[1] = time() if !$staticdev{$mac}[1]; # Reset
          $devname = qx(hcitool name $mac);
          if ($devname && $devname ne "") {
            chomp $devname;

            if ($staticdev{$mac}[0] >= STATIC_DOWN_DELAY) {
              # Init call or link up... Force an network update
              syslogw(LOG_DEBUG, "Up event for %s", $mac);
              update_device($mac,  $devname, '', 0);
              $staticdev{$mac}[4] = 1;
            }

            $staticdev{$mac}[0] = 0;
            $staticdev{$mac}[2] = time();
            $staticdev{$mac}[3] = $devname;
          } else {
            ($staticdev{$mac}[0])++;

             # Down... Force an update
            if ($staticdev{$mac}[0] == STATIC_DOWN_DELAY) {
              syslogw(LOG_DEBUG, "Down event for %s", $mac);
              $staticdev{$mac}[2] = 1;
              $staticdev{$mac}[4] = 1;
            } elsif ($staticdev{$mac}[0] < STATIC_DOWN_DELAY) {
              $staticdev{$mac}[1] = 0; # Recheck now
            }
          }

          next if !$static{$mac};

          # Check availability at least once in the set time period
          $staticdev{$mac}[1] = calc_next_update(\%staticdev, $mac) if $staticdev{$mac}[1];

          # Update the status
          update_device($mac,  $staticdev{$mac}[3], '', $staticdev{$mac}[4], $staticdev{$mac}[2])
            if ($staticdev{$mac}[4] || $staticdev{$mac}[0] < STATIC_DOWN_DELAY);
          $staticdev{$mac}[4] = 0;
        }

        # Check for unreached timer
        foreach my $cmac (keys %static) {
          next if !defined $staticdev{$cmac}[0];
          if (($staticdev{$cmac}[0] < STATIC_DOWN_DELAY) &&
            (time() - $staticdev{$cmac}[2]) >= $static{$cmac}-5) {
            $staticdev{$cmac}[2] = time();
            update_device($cmac,  $staticdev{$cmac}[3], '', 0);
          }
        }

        set_thread_command('bluetooth_info_thread', THREAD_COMMAND_RUN)
          if ($thread_commands{bluetooth_info_thread} == THREAD_COMMAND_RESTART);
      }

      sleep(RETRY_SLEEP);
    }
  }
}

sub handle_command {
  my ($buf, $current_client) = @_;
  if (my ($mac, undef, $interval) = $buf =~ m/^\s*(([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2})\s*\|\s*(\d+)\s*$/) {
    $mac = lc($mac);
    if (my ($client) = grep { $current_client == $_->{'handle'} } @clients) {
      syslogw(LOG_INFO, "Received query update for mac address %s, interval: %i by client %s:%i.",
              $mac, $interval, $current_client->peerhost(), $current_client->peerport());

      $client->{'mac'} = $mac;
      $client->{'interval'} = $interval;
      $client->{'next_check'} = 0; #now
      $static{$mac} = $interval;
    } else {
      syslogw(LOG_INFO, "Received query for mac address %s, interval: %i. Adding client %s:%i to clients list.",
              $mac, $interval, $current_client->peerhost(), $current_client->peerport());

      my %new_client;
      $new_client{'handle'} = $current_client;
      $new_client{'mac'} = $mac;
      $new_client{'interval'} = $interval;
      $new_client{'next_check'} = 0; #now
      push(@clients, \%new_client);

      # Use a new share instance - Current versions of threads::shared do not support
      # sharing of GLOB references or data structures that contain GLOB references
      $static{$mac} = $interval;
    }
    print $current_client "command accepted\n"
  } elsif ($buf =~ m/^\s*now\s*$/) {
    syslogw(LOG_DEBUG, "Received now command from client %s:%i. Scheduling update...",
            $current_client->peerhost(), $current_client->peerport());

    foreach my $client (grep { $_->{'handle'} == $current_client } @clients) {
      $client->{'next_check'} = 0; #now
    }

    print $current_client "command accepted\n"
  } elsif ($buf =~ m/^\s*ping\s*$/) {
      syslogw(LOG_DEBUG, "Received ping command from client %s:%i.",
              $current_client->peerhost(), $current_client->peerport());

      my ($min_age, $max_age, $devices) = gather_stats();
      print $current_client sprintf("pong [clients=%i;devices=%i;min_age=%s;max_age=%s]\n",
        scalar(@clients), $devices, $min_age // '%', $max_age // '%');

      return(1);
  } elsif ($buf =~ m/^\s*stop\s*$/) {
    # Stop does not make sense when scanning permanently
    syslogw(LOG_DEBUG, "Received stop command from client %s:%i. Pretending to care and ignoring...",
            $current_client->peerhost(), $current_client->peerport());

    print $current_client "no command running\n" # ToDo: Does the FHEM module even care?
  } else {
    syslogw(LOG_WARNING, "Received unknown command: '%s'.", $buf);
  }
  return(0);
}

sub gather_stats {
  my ($min_age, $max_age, $devices);
  {
    lock(%devices);
    $devices = scalar(keys(%devices));
    foreach my $mac (keys(%devices)) {
      my $age = time() - $devices{$mac}{'timestamp'};
      $min_age = $age if (!defined($min_age) || $age < $min_age);
      $max_age = $age if (!defined($max_age) || $age > $max_age);
    }
  }
  return($min_age, $max_age, $devices);
}

sub stats_task {
  my ($min_age, $max_age, $devices) = gather_stats();
  syslogw(LOG_INFO, "Active clients: %i, known devices: %i (min/max age: %s/%s)",
    scalar(@clients), $devices, $min_age // '%', $max_age // '%');
  return();
}

sub dump_task {
  printf("Known devices (%i):\n", scalar(keys(%devices)));
  foreach my $mac (sort keys(%devices)) {
    printf("\tmac: %s, ages: %2s/%2s, name: %s\n",
      $mac,
      time() - $devices{$mac}{'timestamp'},
      $devices{$mac}{'prevtimestamp'} ? time() - $devices{$mac}{'prevtimestamp'} : '%',
      $devices{$mac}{'name'}
    );
  }

  return();
}

sub cleanup_task {
  my $start_time = time();
  my $deleted_items = 0;
  {
    lock(%devices);
    foreach my $mac (keys(%devices)) {
      my $age = time() - $devices{$mac}{'timestamp'};
      if (
        $age > CLEANUP_MAX_AGE &&
        scalar(grep { $_->{'mac'} eq $mac } @clients) == 0
      ) {
        $deleted_items++;
        syslogw(LOG_DEBUG, "Deleting device %s.", $mac);
        delete($devices{$mac});
      }
    }
  }

  syslogw(LOG_INFO, "Cleanup finished, deleted %i devices in %i seconds.",
          $deleted_items, time() - $start_time);

  return();
}

sub is_present {
  my ($client) = @_;

  return(
    defined($devices{$client->{'mac'}}) &&
    time()-$devices{$client->{'mac'}}{timestamp} <= $client->{'interval'}
    );
}

openlog(ME, 'pid', LOG_USER);
(my $device, my $daemonize, my $listen_address, my $listen_port, $log_level, $log_target, $debug) = parse_options();

local $SIG{INT} = local $SIG{TERM} = local $SIG{HUP} = sub {
  syslogw(LOG_NOTICE, "Caught signal, cleaning up and exiting...");
  unlink(PIDFILE) if (-e PIDFILE);
  closelog();
  exit(1);
};

syslogw(LOG_NOTICE, "Version %s started (device: %s, listen addr: %s, listen port: %s, daemonize: %i, log level: %i, debug: %i).",
  VERSION, $device, $listen_address, $listen_port, $daemonize, $log_level, $debug);

sanity_check();
daemonize('root', 'root', PIDFILE) if $daemonize;

# Init the main info thread
my $bluetooth_info_thread = threads->new(\&bluetooth_info_thread, $device)->detach();

# Create the server socket
my $current_client;
local $| = 1;
my $server_socket = IO::Socket::INET->new(
  LocalHost => $listen_address,
  LocalPort => $listen_port,
  Proto => 'tcp',
  Listen => 5,
  ReuseAddr => 1,
);

$server_socket or error_exit(2, "ERROR: Unable to create TCP server: $!, Exiting.");
my $select = IO::Select->new($server_socket) or error_exit(1, "ERROR: Unable to select: $!, Exiting.");

# Init the dump valuas
$next_stats_time = time() + STATS_INTERVAL_DEBUG;
$next_dump_time = time() + DUMP_INTERVAL if ($debug);
$next_cleanup_time = time() + CLEANUP_INTERVAL;

local $SIG{PIPE} = sub {
  syslogw(LOG_INFO, "SIGPIPE received!");
};

for(;;) {

  # Process INET socket
  foreach my $current_client ($select->can_read(0)) {
    if($current_client == $server_socket) {
      my $client_socket = $server_socket->accept();
      $select->add($client_socket);

      syslogw(LOG_INFO, "Connection from %s:%s. Connected clients: %i.",
              $client_socket->peerhost(), $client_socket->peerport(), $select->count()-1);
    } else {
      sysread ($current_client, my $buf, INET_RECV_BUFFER);
      my $disconnect;

      if ($buf) {
        chomp($buf);
        $disconnect = handle_command($buf, $current_client);
      }

      if (!$buf || $disconnect) {
       $select->remove($current_client);
       if (my ($client) = grep { $current_client == $_->{'handle'} } @clients) {
          delete($static{$client->{'mac'}});
          my $entries = keys %static;
          syslogw(LOG_DEBUG, "MAC address %s removed from static. Static check entries: %i.",
              $client->{'mac'} , $entries);
        }
        @clients = grep {$_->{'handle'} != $current_client} @clients;

        syslogw(LOG_INFO, "Client %s:%s disconnected. Connected clients: %i.",
                $current_client->peerhost(), $current_client->peerport(), $select->count()-1);
        $current_client->close();
      }
    }
  }

  # Check for forced status updates
  if (scalar(keys(%force)) > 0) {
    foreach my $mac (keys %force) {
      foreach my $client (grep { $_->{'mac'} eq $mac } @clients) {
        $client->{'next_check'} = 0; # check now
      }
      delete($force{$mac});
    }
  }

  # Main loop for client updates, cleanup and stats
  if (my @due_clients = grep { time() >= $_->{'next_check'} } @clients) {

    foreach my $client (@due_clients) {
      if (is_present($client)) {
        syslogw(LOG_DEBUG, "Sending update for mac address %s, ages: %i/%i, max age: %i, result: present.",
          $client->{'mac'},
          time()-$devices{$client->{'mac'}}{'timestamp'},
          time()-$devices{$client->{'mac'}}{'prevtimestamp'},
          $client->{'interval'},
        );

        printf {$client->{'handle'}} "present;device_name=%s;model=lan-%s;daemon=%s V%s\n",
          $devices{$client->{'mac'}}{'name'}, ME, ME, VERSION
        ;
      } else {
        syslogw(LOG_DEBUG, "Sending update for mac address %s, max age: %i, result: absence.",
                $client->{'mac'}, $client->{'interval'});
        printf {$client->{'handle'}} "absence;model=lan-%s;daemon=%s V%s\n", ME, ME, VERSION;
      }

      $client->{'next_check'} = time() + $client->{'interval'};
    }
  } elsif (time() > $next_cleanup_time) {
    cleanup_task();
    $next_cleanup_time = time() + CLEANUP_INTERVAL;
  } elsif (time() > $next_stats_time) {
    stats_task();
    $next_stats_time = time() + ($log_level == LOG_DEBUG ? STATS_INTERVAL_DEBUG : STATS_INTERVAL_INFO);
  } elsif ($debug && time() > $next_dump_time) {
    dump_task();
    $next_dump_time = time() + DUMP_INTERVAL;
  }

  usleep(MAINLOOP_SLEEP_US);
}
$server_socket->close();

__DATA__

